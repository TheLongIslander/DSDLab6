 module register_file (
 input logic clk,
 input logic rst,
 // Reset signal
 input logic [4:0] A1, A2, A3, // Register addresses
 input logic [31:0] WD3,
 input logic WE3,
 output logic [31:0] RD1,
 output logic [31:0] RD2,
 // Data for writing to register A3
 // Write enable for register A3
 // Output for register A1
 // Output for register A2
 output logic [31:0] prode // Output to check the value of register 1
 );
 // Define 32 registers, each 32 bits wide
 logic [31:0] rf_regs [0:31];
 // Initialize the register file using active-low reset
 always_ff @(posedge clk or negedge rst) begin
 if (!rst) begin
 // Active-low reset: initialize each register to its index value
 for (int i = 0; i < 32; i++) begin
 rf_regs[i] <= i;
 end
 end else if (WE3) begin
 // Write data to the specified register if write enable is high
 rf_regs[A3] <= WD3;
 end
 end
 // Read register values
 assign RD1 = rf_regs[A1]; // Output data from register specified by A1
 assign RD2 = rf_regs[A2]; // Output data from register specified by A2
 assign prode = rf_regs[1]; // Probe the value of register 1
 endmodule